#!/bin/bash
# Default gathering data
# - Yaml File
#   - K8s resources
#     - Namespace
#     - Deployment/DeploymentConfig
#     - Replicaset
#     - Pod
#     - Service
#     - Route
#     - PersistentVolumeClaim

#   - OLM resources
#     - Subscription
#     - ClusterServiceVersion(CSV)
#     - Installplan
#     - OperatorGroup
#     - Operator (=> permission issue)
#     - CR (==> ISV responsible)


# - Get Cmd
#   - K8s resources
#     - Deployment/DeploymentConfig
#     - Replicaset
#     - Pod
#     - Service
#     - Route
#     - PersistentVolumeClaim
#     - Event
#
# - Logs Cmd
#   - K8s resources
#     - Pod
#
#
source configs/commons.sh

# Create a directory where all data will be stored
mkdir -p "${BASE_COLLECTION_PATH}"

# Use PWD as base path if no argument is passed
if [ "${BASE_COLLECTION_PATH}" = "" ]; then
    BASE_COLLECTION_PATH=$(pwd)
fi

# Set TOKEN
TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)






# Paths for data store
NAMESPACE_SCOPE_DATA_PATH="${BASE_COLLECTION_PATH}/namespace-scoped-resources"
OPERAND_SCOPE_DATA_PATH="${BASE_COLLECTION_PATH}/operand-resources"

# Command List
oc_gets=()

# collect oc output of OC get commands
# k8s
oc_gets+=("pods")
#oc_gets+=("deploymentconfigs")       # deploymentconfigs
#oc_gets+=("deployment")
#oc_gets+=("replicasets")       # replicasets
#oc_gets+=("replicationcontrollers")       # replicationcontrollers
#oc_gets+=("services")      # services
#oc_gets+=("configmap")       
#oc_gets+=("events")
#oc_gets+=("routes")
#oc_gets+=("csv")
#oc_gets+=("installplan")
#oc_gets+=("subscription")
#oc_gets+=("operatorgroup")
#oc_gets+=("${CUSTOM_RESOURCE_LIST[@]}")

# collect oc output of OC desc commands
oc_descs=()
oc_descs+=("pods")

# collect yaml output of OC commands
oc_yamls=()
#oc_yamls+=("project")
#oc_yamls+=("pods")
#oc_yamls+=("deploymentconfig")
#oc_yamls+=("deployment")
#oc_yamls+=("replicasets")
#oc_yamls+=("replicationcontrollers") 
#oc_yamls+=("configmap")
#oc_yamls+=("services")
#oc_yamls+=("routes")
#oc_yamls+=("csv")
#oc_yamls+=("installplan")
#oc_yamls+=("subscription")
#oc_yamls+=("operatorgroup")
#oc_yamls+=("${CUSTOM_RESOURCE_LIST[@]}")
#
######## Custom Resources #########
# oc_gets+=("")
# oc_descs+=("")
# oc_yamls+=("")
###################################

# share pod list 
pod_list=$(oc get pod --no-headers -o name  -n "${INSTALL_NAMESPACE}")

# For k8s resources in a namespace
echo "collecting dump of ${INSTALL_NAMESPACE}" | tee -a  "${BASE_COLLECTION_PATH}"/gather-debug.log

# Run the Collection of OC get commands
if [[ "${#oc_gets[@]}" -gt 0 ]]
then
  for oc_get in "${oc_gets[@]}"
  do
      echo "collecting dump of oc get command ${oc_get}" | tee -a "${BASE_COLLECTION_PATH}/gather-debug.log"

      case "${oc_get}" in 
        "pods")
            mkdir -p "${NAMESPACE_SCOPE_DATA_PATH}/pods"
            echo "oc get ${oc_get} -o wide -n ${INSTALL_NAMESPACE}"
            { oc get "${oc_get}" -o wide -n "${INSTALL_NAMESPACE}" ; } >> "${NAMESPACE_SCOPE_DATA_PATH}/${oc_get}/${oc_get}_oc_gets_wide.txt" 2>&1
            ;;

          * )
            mkdir -p "${NAMESPACE_SCOPE_DATA_PATH}/${oc_get}"
            echo "oc get ${oc_get} -n ${INSTALL_NAMESPACE}"
            { oc get "${oc_get}" -n "${INSTALL_NAMESPACE}" ; } >> "${NAMESPACE_SCOPE_DATA_PATH}/${oc_get}/${oc_get}_oc_gets.txt" 2>&1
            ;;
        esac
  done
fi

# Run the Collection of OC desc commands
if [[ "${#oc_descs[@]}" -gt 0 ]]
then
  for oc_desc in "${oc_descs[@]}"; do
      echo "collecting dump of oc desc command  ${oc_desc}" | tee -a "${BASE_COLLECTION_PATH}/gather-debug.log"

      mkdir -p "${NAMESPACE_SCOPE_DATA_PATH}/${oc_desc}"
      target_resource_list=$(oc get "${oc_desc}" -n "${INSTALL_NAMESPACE}" --no-headers -o name)

      for item in ${target_resource_list} 
      do 
        name=$(awk -F'/' '{print $2}'<<< "${item}")
        { oc describe "${item}" ; } >> "${NAMESPACE_SCOPE_DATA_PATH}/${oc_desc}/${name}_oc_descs.txt" 2>&1
      done
  done
fi

# Run the Collection of OC yaml commands
if [[ "${#oc_yamls[@]}" -gt 0 ]]
then
  for oc_yaml in "${oc_yamls[@]}"
  do
      echo "collecting dump(yaml) of oc obejct ${oc_yaml}" | tee -a "${BASE_COLLECTION_PATH}/gather-debug.log"

      mkdir -p "${NAMESPACE_SCOPE_DATA_PATH}/${oc_yaml}"
      target_resource_list=$(oc get "${oc_yaml}" -n "${INSTALL_NAMESPACE}" --no-headers -o name)

      for item in ${target_resource_list} 
      do 
        name=$(awk -F'/' '{print $2}'<<< "${item}")
        { oc describe "${item}" ; } >> "${NAMESPACE_SCOPE_DATA_PATH}/${oc_yaml}/${name}.yaml" 2>&1
      done
  done
fi

# Run the Collection of OC log pods command
#if [[ "${#pod_list[@]}" -gt 0 ]]
#then
#  for item in "${pod_list}"
#  do 
#    name=$(awk -F'/' '{print $2}'<<< "${item}")
#    echo "collecting dump of pod log ${name}" | tee -a "${BASE_COLLECTION_PATH}/gather-debug.log"
#
#    mkdir -p "${NAMESPACE_SCOPE_DATA_PATH}/pods/${name}"
#    containers=$(oc get pod "${name}" -n "${INSTALL_NAMESPACE}" -o jsonpath='{ .spec.containers[*].name }')
#
#    if [[ "${#containers[@]}" -ne 1 ]]
#    then
#      for container in "${containers}"
#      do
#        mkdir -p "${NAMESPACE_SCOPE_DATA_PATH}/pods/${name}/${container}"
#        { oc logs "${name}" --since-time "${SINCE_TIME}" -c "${container}" -n "${INSTALL_NAMESPACE}" ; } >> "${NAMESPACE_SCOPE_DATA_PATH}/pods/${name}/${container}/current.log" 2>&1
#      done    
#    else
#      { oc logs "${name}" --since-time  "${SINCE_TIME}" -n "${INSTALL_NAMESPACE}" ; } >> "${NAMESPACE_SCOPE_DATA_PATH}/pods/${name}/current.log" 2>&1
#    fi
#  done
#fi


# Run the Collection of Events yaml from all containers for event-filtor.html
echo "Run the Collection of Events yaml from all containers for event-filtor.html" | tee -a "${BASE_COLLECTION_PATH}/gather-debug.log"
mkdir -p "${NAMESPACE_SCOPE_DATA_PATH}/event_filter_data"
curl -k -H "Accept: application/yaml" -H "authorization: Bearer ${TOKEN}" "https://${KUBERNETES_SERVICE_HOST}/api/v1/namespaces/${INSTALL_NAMESPACE}/events?limit=500" -o "${NAMESPACE_SCOPE_DATA_PATH}/event_filter_data/events.yaml" 

sync

