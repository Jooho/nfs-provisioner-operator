#!/bin/bash
# Default gathering data
# This script will be managed by Red Hat but if you customize, then you must test if this script is working or not before you publish your must-gather image. 

source configs/commons.sh

# Create a directory where all data will be stored
mkdir -p "${BASE_COLLECTION_PATH}"

# Use PWD as base path if no argument is passed
if [ "${BASE_COLLECTION_PATH}" = "" ]; then
    BASE_COLLECTION_PATH=$(pwd)
fi

# Paths for data store
NAMESPACE_SCOPE_DATA_PATH="${BASE_COLLECTION_PATH}/namespace-scoped-resources"

# Command List
oc_gets=()

# collect oc output of OC get commands
# k8s
oc_gets+=("pods")
oc_gets+=("deploymentconfigs")     
oc_gets+=("deployments")
oc_gets+=("replicasets")       
oc_gets+=("replicationcontrollers")     
oc_gets+=("configmaps")       
oc_gets+=("services")      
oc_gets+=("routes")
oc_gets+=("persistentvolumeclaim")
oc_gets+=("events")
oc_gets+=("csvs")
oc_gets+=("installplans")
oc_gets+=("subscriptions")
oc_gets+=("operatorgroups")
oc_gets+=("${CUSTOM_RESOURCE_LIST[@]}")

# collect oc output of OC desc commands
oc_descs=()
oc_descs+=("pods")

# collect yaml output of OC commands
oc_yamls=()
oc_yamls+=("pods")
oc_yamls+=("deploymentconfig")
oc_yamls+=("deployments")
oc_yamls+=("replicasets")
oc_yamls+=("replicationcontrollers") 
oc_yamls+=("configmaps")
oc_yamls+=("services")
oc_yamls+=("routes")
oc_yamls+=("persistentvolumeclaim")
oc_yamls+=("csvs")
oc_yamls+=("installplans")
oc_yamls+=("subscriptions")
oc_yamls+=("operatorgroups")
oc_yamls+=("${CUSTOM_RESOURCE_LIST[@]}")

######## Additional Resources #########
# oc_gets+=("")
# oc_descs+=("")
# oc_yamls+=("")
###################################

# share pod list 
pod_list=$(oc get pod --no-headers -o name  -n "${INSTALL_NAMESPACE}"|grep -v must-gather)

# For k8s resources in a namespace
echo "collecting dump of ${INSTALL_NAMESPACE}" | tee -a  "${BASE_COLLECTION_PATH}"/gather-debug.log

# Run the Collection of OC get commands
if [[ "${#oc_gets[@]}" -gt 0 ]]
then
  for oc_get in "${oc_gets[@]}"
  do

    if is_not_nothing "${oc_get}"
    then
      echo "collecting dump of oc get command ${oc_get}" | tee -a "${BASE_COLLECTION_PATH}/gather-debug.log"
      
      OC_GET_DIR="${NAMESPACE_SCOPE_DATA_PATH}/oc_get"
      mkdir -p "${OC_GET_DIR}"

      OPTIONS=""
      if [[ "${oc_get}" == "pods" ]]
      then 
        OPTIONS="-o wide"
      fi

      echo "oc get ${oc_get} ${OPTIONS} -n ${INSTALL_NAMESPACE}"
      { oc get ${oc_get} ${OPTIONS} -n ${INSTALL_NAMESPACE} ; } >> "${OC_GET_DIR}/${oc_get}" 2>&1
    fi
  done
fi

# Run the Collection of OC desc commands
if [[ "${#oc_descs[@]}" -gt 0 ]]
then
  for oc_desc in "${oc_descs[@]}"; do

    if is_not_nothing "${oc_desc}" 
    then
      echo "collecting dump of oc desc command  ${oc_desc}" | tee -a "${BASE_COLLECTION_PATH}/gather-debug.log"

      OC_DESC_DIR="${NAMESPACE_SCOPE_DATA_PATH}/oc_desc"
      mkdir -p "${OC_DESC_DIR}"

      target_resource_list=$(oc get "${oc_desc}" -n "${INSTALL_NAMESPACE}" --no-headers -o name|grep -v must-gather)

      for item in ${target_resource_list} 
      do 
        name=$(awk -F'/' '{print $2}'<<< "${item}")
        { oc describe ${item} -n ${INSTALL_NAMESPACE}; } >> "${OC_DESC_DIR}/${name}" 2>&1
      done
    fi
  done
fi

# Run the Collection of OC yaml commands
if [[ "${#oc_yamls[@]}" -gt 0 ]]
then
  for oc_yaml in "${oc_yamls[@]}"
  do

    if is_not_nothing "${oc_desc} "
    then
      echo "collecting dump(yaml) of oc obejct ${oc_yaml}" | tee -a "${BASE_COLLECTION_PATH}/gather-debug.log"

      YAML_DIR="${NAMESPACE_SCOPE_DATA_PATH}/yaml/${oc_yaml}"
      mkdir -p "${YAML_DIR}"
      
      target_resource_list=$(oc get "${oc_yaml}" -n "${INSTALL_NAMESPACE}" --no-headers -o name|grep -v must-gather)

      for item in ${target_resource_list} 
      do 
        name=$(awk -F'/' '{print $2}'<<< "${item}")
        { oc describe ${item} ; } >> "${YAML_DIR}/${name}.yaml" 2>&1
      done
    fi
  done
fi

# Run the Collection of OC log pods command
if [[ "${#pod_list[@]}" -gt 0 ]]
then
  for item in ${pod_list}
  do 
    name=$(awk -F'/' '{print $2}'<<< "${item}")
    echo "collecting dump of pod log ${name}" | tee -a "${BASE_COLLECTION_PATH}/gather-debug.log"

    POD_LOG_DIR="${NAMESPACE_SCOPE_DATA_PATH}/pod_logs/${name}"
    mkdir -p "${POD_LOG_DIR}"
    
    containers=$(oc get pod "${name}" -n "${INSTALL_NAMESPACE}" -o jsonpath='{ .spec.containers[*].name }')

    if [[ $(wc -w <<< "${containers[@]}") != 1 ]]
    then
      for container in ${containers}
      do
        mkdir -p "${POD_LOG_DIR}/containers"
        { oc logs ${name} --since ${SINCE_TIME} -c ${container} -n ${INSTALL_NAMESPACE} ; } >> "${POD_LOG_DIR}/containers/${container}.log" 2>&1
      done    
    else
      { oc logs ${name} --since ${SINCE_TIME} -n ${INSTALL_NAMESPACE} ; } >> "${POD_LOG_DIR}/pod.log" 2>&1
    fi
  done
fi

# Run the Collection of Events yaml from all containers for event-filtor.html
if is_not_nothing event 
then  
  echo "Run the Collection of Events yaml from all containers for event-filtor.html" | tee -a "${BASE_COLLECTION_PATH}/gather-debug.log"
  mkdir -p "${NAMESPACE_SCOPE_DATA_PATH}/event_filter_data"
  curl -k -H "Accept: application/yaml" -H "authorization: Bearer ${TOKEN}" "https://${KUBERNETES_SERVICE_HOST}/api/v1/namespaces/${INSTALL_NAMESPACE}/events?limit=500" -o "${NAMESPACE_SCOPE_DATA_PATH}/event_filter_data/events.yaml" 
fi

sync
